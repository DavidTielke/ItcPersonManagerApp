<?xml version="1.0" encoding="utf-8"?>
<Queries>
  <Group Name="SRP Verletzungen" Active="True" ShownInReport="False">
    <Query Active="True" DisplayList="True" DisplayStat="False" DisplaySelectionView="False" IsCriticalRule="False"><![CDATA[// <Name>Klassen mit mehr als 220 LOC</Name>
//<Id>IC0201</Id>
warnif count > 0 
from t in JustMyCode.Types
where t.NbLinesOfCode > 2 || t.NbMethods > 10
select new { t, t.NbLinesOfCode , t.Methods}]]></Query>
    <Query Active="True" DisplayList="True" DisplayStat="False" DisplaySelectionView="False" IsCriticalRule="False"><![CDATA[// <Name>Methoden mit pot. SRP Verletzungen</Name>
//<Id>IC0201</Id>
warnif count > 0 

let trueMethods = JustMyCode.Methods.Where(m => !m.IsConstructor && !m.IsStatic && !m.IsPropertyGetter && !m.IsPropertySetter)

from m in trueMethods


where m.NbLinesOfCode > 2 || m.CyclomaticComplexity > 1
select new { m, m.ParentType, m.NbLinesOfCode, m.CyclomaticComplexity }
]]></Query>
  </Group>
  <Group Name="Namensmuster Klassen" Active="True" ShownInReport="False">
    <Query Active="True" DisplayList="True" DisplayStat="False" DisplaySelectionView="False" IsCriticalRule="False"><![CDATA[// <Name>[RC0201] Klassen ohne Namensmuster</Name>
warnif count > 0 

let classBlacklist = new string[]{"Program"}
let namePatterns = new string[]
{
   "Manager",
   "Repository",
   "Parser",
   "Reader",
   "Commands",
   "Writer",
   "Serializer",
   "Sender",
   "Workflows",
   "Controller"
}

let managementClasses = JustMyCode.Types.Where(t => !t.ParentNamespace.NameLike("DataClasses") 
                                                    && !classBlacklist.Contains(t.SimpleName) 
                                                    && !t.IsGeneratedByCompiler)

from t in managementClasses

where !namePatterns.Any(np => t.SimpleName.EndsWith(np))

select new { t, t.Methods, Debt = 20.ToMinutes().ToDebt() }]]></Query>
    <Query Active="True" DisplayList="True" DisplayStat="False" DisplaySelectionView="False" IsCriticalRule="False"><![CDATA[// <Name>[RC0202] Namensmuster Manager wird eingehalten</Name>
warnif count > 0
 
let namePattern = "Manager"
let allowedMethods = new []{"Add","Update","Remove"}
let allowedPrefixes = new[]{"Get","Is","Are"}
 
 
let managementClasses = JustMyCode.Types.Where(t => !t.ParentNamespace.NameLike("DataClasses") && !t.IsGeneratedByCompiler)
 
from t in managementClasses.Where(t1 => t1.Name.EndsWith(namePattern))
 
let trueMethods = t.Methods.Where(m => !m.IsGeneratedByCompiler && !m.IsPropertyGetter && !m.IsPropertySetter && !m.IsConstructor)
 
let forbiddenMethods = trueMethods.Where(m => !allowedMethods.Any(m1 => m.SimpleName == m1) 
&& allowedPrefixes.All(mp => !m.SimpleName.StartsWith(mp)))
where forbiddenMethods.Any()
 
select new { t, forbiddenMethods }]]></Query>
    <Query Active="True" DisplayList="True" DisplayStat="False" DisplaySelectionView="False" IsCriticalRule="False"><![CDATA[// <Name>[RC0203] Namensmuster Repository wird eingehalten</Name>
warnif count > 0
 
let namePattern = "Repository"
let allowedMethods = new []{"Insert","Update","Delete", "Query"}
let allowedPrefixes = new string[]{}
 
 
let managementClasses = JustMyCode.Types.Where(t => !t.ParentNamespace.NameLike("DataClasses") && !t.IsGeneratedByCompiler)
 
from t in managementClasses.Where(t1 => t1.Name.EndsWith(namePattern))
 
let trueMethods = t.Methods.Where(m => !m.IsGeneratedByCompiler && !m.IsPropertyGetter && !m.IsPropertySetter && !m.IsConstructor && m.IsPublic)
 
let forbiddenMethods = trueMethods.Where(m => !allowedMethods.Any(m1 => m.SimpleName == m1) 
&& allowedPrefixes.All(mp => !m.SimpleName.StartsWith(mp)))
where forbiddenMethods.Any()
 
select new { t, forbiddenMethods }
]]></Query>
    <Query Active="True" DisplayList="True" DisplayStat="False" DisplaySelectionView="False" IsCriticalRule="False"><![CDATA[// <Name>[RC0204] Namensmuster Parser wird eingehalten</Name>
warnif count > 0
 
let namePattern = "Parser"
let allowedMethods = new string[]{}
let allowedPrefixes = new string[]{"ParseFrom"}
 
 
let managementClasses = JustMyCode.Types.Where(t => !t.ParentNamespace.NameLike("DataClasses") && !t.IsGeneratedByCompiler)
 
from t in managementClasses.Where(t1 => t1.Name.EndsWith(namePattern))
 
let trueMethods = t.Methods.Where(m => !m.IsGeneratedByCompiler && !m.IsPropertyGetter && !m.IsPropertySetter && !m.IsConstructor)
 
let forbiddenMethods = trueMethods.Where(m => !allowedMethods.Any(m1 => m.SimpleName == m1) 
&& allowedPrefixes.All(mp => !m.SimpleName.StartsWith(mp)))
where forbiddenMethods.Any()
 
select new { t, forbiddenMethods }

]]></Query>
    <Query Active="True" DisplayList="True" DisplayStat="False" DisplaySelectionView="False" IsCriticalRule="False"><![CDATA[// <Name>[RC0205] Namensmuster Serializer wird eingehalten</Name>
warnif count > 0
 
let namePattern = "Serializer"
let allowedMethods = new string[]{}
let allowedPrefixes = new string[]{"SerializeFrom","SerializeTo"}
 
 
let managementClasses = JustMyCode.Types.Where(t => !t.ParentNamespace.NameLike("DataClasses") && !t.IsGeneratedByCompiler)
 
from t in managementClasses.Where(t1 => t1.Name.EndsWith(namePattern))
 
let trueMethods = t.Methods.Where(m => !m.IsGeneratedByCompiler && !m.IsPropertyGetter && !m.IsPropertySetter && !m.IsConstructor)
 
let forbiddenMethods = trueMethods.Where(m => !allowedMethods.Any(m1 => m.SimpleName == m1) 
&& allowedPrefixes.All(mp => !m.SimpleName.StartsWith(mp)))
where forbiddenMethods.Any()
 
select new { t, forbiddenMethods }

]]></Query>
    <Query Active="True" DisplayList="True" DisplayStat="False" DisplaySelectionView="False" IsCriticalRule="False"><![CDATA[// <Name>[RC0206] Namensmuster Parser wird eingehalten</Name>
warnif count > 0
 
let namePattern = "Parser"
let allowedMethods = new string[]{}
let allowedPrefixes = new string[]{"ParseFrom"}
 
 
let managementClasses = JustMyCode.Types.Where(t => !t.ParentNamespace.NameLike("DataClasses") && !t.IsGeneratedByCompiler)
 
from t in managementClasses.Where(t1 => t1.Name.EndsWith(namePattern))
 
let trueMethods = t.Methods.Where(m => !m.IsGeneratedByCompiler && !m.IsPropertyGetter && !m.IsPropertySetter && !m.IsConstructor)
 
let forbiddenMethods = trueMethods.Where(m => !allowedMethods.Any(m1 => m.SimpleName == m1) 
&& allowedPrefixes.All(mp => !m.SimpleName.StartsWith(mp)))
where forbiddenMethods.Any()
 
select new { t, forbiddenMethods }

]]></Query>
    <Query Active="True" DisplayList="True" DisplayStat="False" DisplaySelectionView="False" IsCriticalRule="False"><![CDATA[// <Name>[RC0207] Namensmuster Reader wird eingehalten</Name>
warnif count > 0
 
let namePattern = "Reader"
let allowedMethods = new string[]{}
let allowedPrefixes = new string[]{"Read"}
 
 
let managementClasses = JustMyCode.Types.Where(t => !t.ParentNamespace.NameLike("DataClasses") && !t.IsGeneratedByCompiler)
 
from t in managementClasses.Where(t1 => t1.Name.EndsWith(namePattern))
 
let trueMethods = t.Methods.Where(m => !m.IsGeneratedByCompiler && !m.IsPropertyGetter && !m.IsPropertySetter && !m.IsConstructor)
 
let forbiddenMethods = trueMethods.Where(m => !allowedMethods.Any(m1 => m.SimpleName == m1) 
&& allowedPrefixes.All(mp => !m.SimpleName.StartsWith(mp)))
where forbiddenMethods.Any()
 
select new { t, forbiddenMethods }

]]></Query>
    <Query Active="True" DisplayList="True" DisplayStat="False" DisplaySelectionView="False" IsCriticalRule="False"><![CDATA[// <Name>[RC0208] Namensmuster Writer wird eingehalten</Name>
warnif count > 0
 
let namePattern = "Writer"
let allowedMethods = new string[]{}
let allowedPrefixes = new string[]{"Append"}
 
 
let managementClasses = JustMyCode.Types.Where(t => !t.ParentNamespace.NameLike("DataClasses") && !t.IsGeneratedByCompiler)
 
from t in managementClasses.Where(t1 => t1.Name.EndsWith(namePattern))
 
let trueMethods = t.Methods.Where(m => !m.IsGeneratedByCompiler && !m.IsPropertyGetter && !m.IsPropertySetter && !m.IsConstructor)
 
let forbiddenMethods = trueMethods.Where(m => !allowedMethods.Any(m1 => m.SimpleName == m1) 
&& allowedPrefixes.All(mp => !m.SimpleName.StartsWith(mp)))
where forbiddenMethods.Any()
 
select new { t, forbiddenMethods }

]]></Query>
    <Query Active="True" DisplayList="True" DisplayStat="False" DisplaySelectionView="False" IsCriticalRule="False"><![CDATA[// <Name>[RC0209] Namensmuster Workflow wird eingehalten</Name>
warnif count > 0
 
let namePattern = "Workflow"
let allowedMethods = new string[]{}
let allowedPrefixes = new string[]{"Run"}
 
 
let managementClasses = JustMyCode.Types.Where(t => !t.ParentNamespace.NameLike("DataClasses") && !t.IsGeneratedByCompiler)
 
from t in managementClasses.Where(t1 => t1.Name.EndsWith(namePattern))
 
let trueMethods = t.Methods.Where(m => !m.IsGeneratedByCompiler && !m.IsPropertyGetter && !m.IsPropertySetter && !m.IsConstructor)
 
let forbiddenMethods = trueMethods.Where(m => !allowedMethods.Any(m1 => m.SimpleName == m1) 
&& allowedPrefixes.All(mp => !m.SimpleName.StartsWith(mp)))
where forbiddenMethods.Any()
 
select new { t, forbiddenMethods }


]]></Query>
    <Query Active="True" DisplayList="True" DisplayStat="False" DisplaySelectionView="False" IsCriticalRule="False"><![CDATA[// <Name>[RC0209] Namensmuster Commands wird eingehalten</Name>
//<Id>IC0201:Foo</Id>
warnif count > 0
 
let namePattern = "Commands"
let allowedMethods = new string[]{}
let allowedPrefixes = new string[]{"Display","Input"}
 
 
let managementClasses = JustMyCode.Types.Where(t => !t.ParentNamespace.NameLike("DataClasses") && !t.IsGeneratedByCompiler)
 
from t in managementClasses.Where(t1 => t1.Name.EndsWith(namePattern))
 
let trueMethods = t.Methods.Where(m => !m.IsGeneratedByCompiler && !m.IsPropertyGetter && !m.IsPropertySetter && !m.IsConstructor)
 
let forbiddenMethods = trueMethods.Where(m => !allowedMethods.Any(m1 => m.SimpleName == m1) 
&& allowedPrefixes.All(mp => !m.SimpleName.StartsWith(mp)))
where forbiddenMethods.Any()
 
select new { t, forbiddenMethods }



]]></Query>
  </Group>
  <Group Name="Namensmuster Komponenten" Active="True" ShownInReport="False">
    <Query Active="True" DisplayList="True" DisplayStat="False" DisplaySelectionView="False" IsCriticalRule="False"><![CDATA[// <Name>Komponenten ohne Namensmuster</Name>
warnif count > 0 

let namepatterns = new string[]{
   "Client",
   "Management",
   "Storage",
   "DataClasses"
}

from cns in JustMyCode.Assemblies.SelectMany(a1 => a1.ChildNamespaces)

where !namepatterns.Any(np => cns.SimpleName.EndsWith(np))

select new { cns.ParentAssembly, cns.SimpleName}
]]></Query>
    <Query Active="True" DisplayList="True" DisplayStat="False" DisplaySelectionView="False" IsCriticalRule="False"><![CDATA[// <Name>Namensmuster Management wird eingehalten</Name>
warnif count > 0 

let namepattern = "Management"
let allowedClassPatterns = new string[]{"Manager"}

let components = JustMyCode.Assemblies.SelectMany(a =>a.ChildNamespaces).Where(c => c.SimpleName.EndsWith(namepattern))

from c in components

let forbiddenClasses = c
                        .ChildTypes
                        .Where(ct => allowedClassPatterns.All(acp => !ct.SimpleName.EndsWith(acp)))
                        .Where(ct => !ct.IsGeneratedByCompiler)

where forbiddenClasses.Any()

select new{c.ParentAssembly, c.SimpleName, forbiddenClasses}]]></Query>
    <Query Active="True" DisplayList="True" DisplayStat="False" DisplaySelectionView="False" IsCriticalRule="False"><![CDATA[// <Name>Namensmuster Storage wird eingehalten</Name>
warnif count > 0 

let namepattern = "Storage"
let allowedClassPatterns = new string[]{"Repository","Parser","Reader"}

let components = JustMyCode.Assemblies.SelectMany(a =>a.ChildNamespaces).Where(c => c.SimpleName.EndsWith(namepattern))

from c in components

let forbiddenClasses = c
                        .ChildTypes
                        .Where(ct => allowedClassPatterns.All(acp => !ct.SimpleName.EndsWith(acp)))
                        .Where(ct => !ct.IsGeneratedByCompiler)

where forbiddenClasses.Any()

select new{c.ParentAssembly, c.SimpleName, forbiddenClasses}]]></Query>
    <Query Active="True" DisplayList="True" DisplayStat="False" DisplaySelectionView="False" IsCriticalRule="False"><![CDATA[// <Name>Namensmuster Client wird eingehalten</Name>
warnif count > 0 

let namepattern = "Client"
let allowedClassPatterns = new string[]{"Program","DisplayCommands"}

let components = JustMyCode.Assemblies.SelectMany(a =>a.ChildNamespaces).Where(c => c.SimpleName.EndsWith(namepattern))

from c in components

let forbiddenClasses = c
                        .ChildTypes
                        .Where(ct => allowedClassPatterns.All(acp => !ct.SimpleName.EndsWith(acp)))
                        .Where(ct => !ct.IsGeneratedByCompiler)

where forbiddenClasses.Any()

select new{c.ParentAssembly, c.SimpleName, forbiddenClasses}

]]></Query>
  </Group>
</Queries>